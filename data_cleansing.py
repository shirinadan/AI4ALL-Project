# -*- coding: utf-8 -*-
"""Data Cleansing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15pYp9Uz3t0f-YliVq_6_uB4S9r6JXXM6
"""

# Install dependencies as needed:
# pip install kagglehub[pandas-datasets

import kagglehub
from kagglehub import KaggleDatasetAdapter

# Set the path to the file you'd like to load
file_path = "global_startup_success_dataset.csv"

# Load the latest version
df = kagglehub.load_dataset(
  KaggleDatasetAdapter.PANDAS,
  "hamnakaleemds/global-startup-success-dataset",
  file_path,
  # Provide any additional arguments like
  # sql_query or pandas_kwargs. See the
  # documenation for more information:
  # https://github.com/Kaggle/kagglehub/blob/main/README.md#kaggledatasetadapterpandas
)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression


from sklearn.metrics import mean_squared_error

# change categorical "StartupName" to numeric "ID"

df['StartupID'] = df['Startup Name'].str.extract(r'_(\d+)', expand = False).astype('Int64')
# new functions used:
# .str.extract() --> a string accessor method that extract specific patterns from string columns.
# .astype(int) --> converts the extracted number from string to integer type.

df = df.drop(columns = ['Startup Name'])
cols = list(df.columns)
cols.remove('StartupID')
cols.insert(0, 'StartupID')
df = df[cols]



print(df.head(50))

print("Values in 'Acquired?':")
print(df['Acquired?'].value_counts())

print("\n" + "="*30 + "\n") # Separator

# See what the current values are in the 'IPO?' column
print("Values in 'IPO?':")
print(df['IPO?'].value_counts())

# --- Assuming the values are 'Yes' and 'No' ---
# Create a mapping dictionary
binary_map = {'Yes': 1, 'No': 0}

# Apply the map to convert the columns to numbers
df['Acquired?'] = df['Acquired?'].map(binary_map)
df['IPO?'] = df['IPO?'].map(binary_map)

print("\nData types after converting binary columns:")
df.info()

# Check the 'Industry' column for consistency
print("--- Top 15 Industries ---")
print(df['Industry'].value_counts().head(15))

print("\n" + "="*30 + "\n")

# Check the 'Funding Stage' column
print("--- Funding Stages ---")
print(df['Funding Stage'].value_counts())

print("\n" + "="*30 + "\n")

# Check the 'Country' column
print("--- Top 15 Countries ---")
print(df['Country'].value_counts().head(15))

# Set up a figure for multiple plots
plt.figure(figsize=(18, 6))
plt.suptitle('Distributions of Key Numerical Features', fontsize=16)

# Plot for Total Funding
plt.subplot(1, 3, 1) # (1 row, 3 columns, 1st plot)
sns.boxplot(y=df['Total Funding ($M)'])
plt.title('Total Funding')

# Plot for Annual Revenue
plt.subplot(1, 3, 2) # (1 row, 3 columns, 2nd plot)
sns.boxplot(y=df['Annual Revenue ($M)'])
plt.title('Annual Revenue')

# Plot for Number of Employees
plt.subplot(1, 3, 3) # (1 row, 3 columns, 3rd plot)
sns.boxplot(y=df['Number of Employees'])
plt.title('Number of Employees')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()